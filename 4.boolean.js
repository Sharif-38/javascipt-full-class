// Boolean ডাটা টাইপ JavaScript-এ একটি লজিক্যাল ডাটা টাইপ যা দুটি মান ধারণ করতে পারে: true এবং false। এগুলি সাধারণত শর্ত বা তুলনার ফলস্বরূপ ব্যবহৃত হয়।




let learning = true;
let completed = false;
console.log(typeof learning);

// এখানে, learning ভেরিয়েবলে true মান দেওয়া হয়েছে, এবং completed-এ false।
// typeof learning দিয়ে আমরা জানাচ্ছি যে learning একটি Boolean টাইপ, সুতরাং এটি "boolean" প্রিন্ট করবে।
// typeof অপারেটর দিয়ে ভেরিয়েবলের ডাটা টাইপ চেক করা হয়।


let x = 4 > 10;
console.log(x);
console.log(typeof x);

/**
 * এখানে 4 > 10 একটি তুলনা, যা চেক করছে ৪ কি ১০ এর চেয়ে বড়।
এই তুলনাটি false রিটার্ন করবে, কারণ ৪, ১০ এর চেয়ে বড় নয়।
x-এর মান হবে false, এবং console.log(x) false প্রিন্ট করবে।
typeof x করবে "boolean", কারণ x একটি Boolean ভেরিয়েবল।

Boolean মান (true এবং false) সাধারণত শর্ত সাপেক্ষ বিবৃতি যেমন if, while, বা for লুপে ব্যবহৃত হয়, যেখানে কোডের চলাচল নির্ভর করে একটি শর্তের মানের উপর।
তুলনা অপারেটর (যেমন >, <, >=, <=, ===, !==) সাধারণত Boolean মান রিটার্ন করে (true বা false)।
লজিক্যাল অপারেটর (&&, ||, !) Boolean মানের সাথে কাজ করে শর্তের মিল/অমিল বা নেতিবাচকতা চেক করতে।

Booleans অত্যন্ত গুরুত্বপূর্ণ শর্তমূলক সিদ্ধান্তে, যেখানে আপনি যাচাই করেন কিছু সত্যি না মিথ্যা, এবং সেই অনুযায়ী আপনার কোডের পরবর্তী পদক্ষেপ নির্ধারণ করেন।
 */

// Undefiend 

/**
 * undefined JavaScript এর একটি বিশেষ ডাটা টাইপ যা এমন পরিস্থিতিতে ব্যবহৃত হয় যখন একটি ভেরিয়েবল ঘোষণা করা হয়, কিন্তু তাকে কোন মান (value) অ্যাসাইন করা হয় না। এটি প্রোগ্রামিংয়ে সাধারণত একটি "অজ্ঞাত" বা "অসুবিধাজনক" অবস্থাকে নির্দেশ করে, যেখানে আপনি একটি ভেরিয়েবল অথবা অবজেক্টের প্রপার্টির মান জানেন না বা সেটি ইনিশিয়ালাইজ (প্রাথমিক মান প্রদান) হয়নি।

1. undefined ডাটা টাইপ:
ডিফাইনেশন: undefined একটি প্রাথমিক ডাটা টাইপ যা JavaScript এ এমন কোনো ভেরিয়েবলের জন্য স্বয়ংক্রিয়ভাবে নির্ধারিত হয়, যার মান নির্দিষ্ট করা হয়নি।
undefined এর মান: যখন আপনি একটি ভেরিয়েবল ঘোষণা করেন কিন্তু তাকে কোনো মান দেন না, তখন সেই ভেরিয়েবলটির মান হবে undefined।
2. কোথায় undefined পাওয়া যায়?
i. ভেরিয়েবল ডিক্লেয়ারেশনের পর ইনিশিয়ালাইজ না করা:
যখন আপনি একটি ভেরিয়েবল ঘোষণা করেন, কিন্তু তাকে কোনো মান দেন না, তখন সেই ভেরিয়েবলটির মান হবে undefined।


let a;
console.log(a);  // undefined


এখানে, a ভেরিয়েবলটি ঘোষণা করা হয়েছে, কিন্তু কোনো মান (value) নির্ধারণ করা হয়নি, তাই এটি undefined হিসেবে প্রিন্ট হবে।
ii. ফাংশন থেকে রিটার্ন না করা:
যদি আপনি একটি ফাংশন লিখেন এবং সেই ফাংশন থেকে কোন মান (value) রিটার্ন না করেন, তাহলে সেই ফাংশনের রিটার্ন ভ্যালু হবে undefined।


function myFunction() {
  let x = 10;
}

let result = myFunction();
console.log(result);  // undefined


এখানে, myFunction() ফাংশনটি কোনো মান রিটার্ন করছে না, তাই result ভেরিয়েবলটি undefined হবে।
iii. অবজেক্ট প্রপার্টি না থাকা:
যখন আপনি কোনো অবজেক্টের এমন প্রপার্টি অ্যাক্সেস করেন যা অবজেক্টে উপস্থিত নেই, তখন আপনাকে undefined পাবেন।


let person = {
  name: "John",
  age: 30
};

console.log(person.address);  // undefined


এখানে, person অবজেক্টে address নামে কোনো প্রপার্টি নেই, তাই person.address হবে undefined।
iv. Array এর অস্থিত প্রপার্টি:
যখন আপনি একটি অ্যারের এমন একটি ইনডেক্স অ্যাক্সেস করেন যা বিদ্যমান নেই, তখনও undefined পাওয়া যায়।



let arr = [1, 2, 3];
console.log(arr[5]);  // undefined


এখানে, arr[5] অ্যারের ৫ম ইনডেক্সে কোনো মান নেই, তাই এটি undefined রিটার্ন করবে।
3. undefined বনাম null:
এটি খুবই গুরুত্বপূর্ণ যে, undefined এবং null দুটি আলাদা কনসেপ্ট।

undefined: সাধারণত ব্যবহার করা হয় যখন একটি ভেরিয়েবল বা প্রপার্টি প্রাথমিকভাবে নির্ধারিত না হয় বা তার কোনো মান দেয়া হয়নি। এটি একটি ডাটা টাইপও।
null: এটি একটি অ্যাসাইনড মান যা একটি অবজেক্টের "বিকলিত" অবস্থাকে নির্দেশ করে। null মানটি স্পষ্টভাবে অ্যাসাইন করা হয় যখন আপনি জানেন যে কোনো ডাটা নেই।



let x;
console.log(x);  // undefined

let y = null;
console.log(y);  // null


x ভেরিয়েবলটি ঘোষণা করা হয়েছে কিন্তু মান দেওয়া হয়নি, সুতরাং এটি undefined।
y ভেরিয়েবলটি স্পষ্টভাবে null অ্যাসাইন করা হয়েছে।
4. undefined এর ব্যবহার ও সমস্যা:
যখন একটি ভেরিয়েবল undefined থাকে, এর মানে এটি এখনো প্রাথমিকভাবে নির্ধারিত হয়নি বা তার কোনো বৈধ মান নেই।
undefined অ্যাসাইন করলে তা সাধারণত ভুল অথবা ডেভেলপমেন্টের সময় বুঝতে সাহায্য করে যে কিছু ভুল হয়েছে বা কিছু বাদ গেছে।
5. undefined এর চেক করা:
যদি আপনি undefined চেক করতে চান, তাহলে সরাসরি এটি তুলনা করতে পারেন বা typeof ব্যবহার করতে পারেন।



let a;
console.log(a === undefined);  // true

let b = null;
console.log(b === undefined);  // false

console.log(typeof a);  // "undefined"


a === undefined এর মাধ্যমে আপনি চেক করতে পারেন যদি a এর মান undefined হয়।
typeof অপারেটর দিয়ে আপনি যেকোনো ভেরিয়েবলের টাইপ চেক করতে পারেন, এবং এটি undefined টাইপ ফেরত দিবে।
6. undefined এবং Type Coercion:
যখন আপনি undefined কে অন্য যেকোনো ডাটা টাইপের সাথে তুলনা করেন, তখন JavaScript এটি false হিসেবে পরিণত করতে পারে।


console.log(undefined == null);  // true
console.log(undefined === null); // false


== (দ্বৈত সমতা) অপারেটর ব্যবহার করলে undefined এবং null সমান বলে ধরা হয়, কিন্তু === (ত্রৈমাসিক সমতা) ব্যবহার করলে তারা আলাদা হিসেবে বিবেচিত হয়।
সারাংশ:
undefined JavaScript এ এমন একটি ডাটা টাইপ যা সাধারণত ব্যবহৃত হয় যখন কোন ভেরিয়েবল বা অবজেক্ট প্রপার্টির মান নির্ধারিত না থাকে।
এটি সাধারণত স্বয়ংক্রিয়ভাবে JavaScript দ্বারা অ্যাসাইন করা হয়, কিন্তু আপনি চাইলে এটিকে স্পষ্টভাবে অ্যাসাইনও করতে পারেন।
undefined এবং null এর মধ্যে পার্থক্য বুঝতে হবে, যেখানে undefined একটি অজ্ঞাত বা প্রাথমিক মানের অভাবকে নির্দেশ করে এবং null একটি নির্দিষ্ট শূন্য মান।
 */

//         Null              

/**
 * null JavaScript-এ একটি বিশেষ ডাটা টাইপ যা একটি "শূন্য" বা "অবসন্ন" মান নির্দেশ করে। এটি অসুস্থ বা বিকল অবস্থা হিসেবে বিবেচিত হয়, এবং সাধারণত একটি ভেরিয়েবলে নির্দিষ্ট কোনো মান নেই এমন পরিস্থিতিতে ব্যবহৃত হয়।

1. null ডাটা টাইপ:
ডিফাইনেশন: null একটি ডাটা টাইপ যা শূন্য বা অব্যবহৃত অবস্থাকে নির্দেশ করে। এটি একটি স্পষ্টভাবে অ্যাসাইন করা মান, এবং এটি জাভাস্ক্রিপ্টের একমাত্র মান যা একটি "empty" বা "non-existent" অবস্থা নির্দেশ করে।


let x = null;
console.log(x);  // null

2. null এবং undefined এর পার্থক্য:
null এবং undefined দুটি আলাদা কনসেপ্ট হলেও, অনেক সময় তাদের মধ্যে বিভ্রান্তি হয়। তবে, এগুলির মধ্যে কিছু গুরুত্বপূর্ণ পার্থক্য রয়েছে:

null: এটি একটি স্পষ্টভাবে অ্যাসাইন করা মান যা একটি শূন্য অবস্থাকে নির্দেশ করে। আপনি যদি জানেন যে কোন মান নেই, তখন null ব্যবহার করা হয়।
undefined: এটি তখন আসে যখন একটি ভেরিয়েবল বা প্রপার্টি ঘোষণা করা হয়, কিন্তু তাকে কোন মান দেওয়া হয়নি। এটি JavaScript দ্বারা স্বয়ংক্রিয়ভাবে দেওয়া হয়।
উদাহরণ:



let a;  // `a` একটি ভেরিয়েবল কিন্তু মান দেয়া হয়নি
console.log(a);  // undefined

let b = null;  // `b` ভেরিয়েবলে শূন্য মান দেয়া হয়েছে
console.log(b);  // null

এখানে a undefined হওয়া সত্ত্বেও, b null।
3. null এর ব্যবহার:
null বিভিন্ন পরিস্থিতিতে ব্যবহৃত হয়, যেমন:

i. অবজেক্টের শূন্য মান (Empty Object):
আপনি একটি অবজেক্ট বা অ্যারের মধ্যে কোনো মান না থাকলে সেটিকে null দিয়ে ইনিশিয়ালাইজ করতে পারেন।



let person = null;
console.log(person);  // null

এখানে, person ভেরিয়েবলটি null দিয়ে ইনিশিয়ালাইজ করা হয়েছে, যার মানে এটি কোনো অবজেক্ট বা ডেটা ধারণ করছে না।
ii. অবজেক্ট বা ডেটা নেই এমন অবস্থায়:
ধরা যাক, একটি ফাংশন থেকে আপনি কোনো অবজেক্ট বা ডেটা রিটার্ন করতে চান, কিন্তু কিছু কারণে ডেটা পাওয়া যাচ্ছে না, তখন আপনি null রিটার্ন করতে পারেন।



function findUser(id) {
  if (id !== 1) {
    return null;  // যদি ব্যবহারকারী না পাওয়া যায়, তবে null রিটার্ন করো
  }
  return { name: "John", age: 30 };
}

let user = findUser(2);
console.log(user);  // null


এখানে, id এর মান যদি ১ না হয়, তবে null রিটার্ন হবে, যা নির্দেশ করবে যে ব্যবহারকারীটি পাওয়া যায়নি।
iii. Null Checking:
যখন আপনি null এর সাথে কোনো ভেরিয়েবল বা অবজেক্টের মান পরীক্ষা করেন, তখন null চেক করা প্রয়োজন। আপনি যদি কোনো অবজেক্টের প্রপার্টি অ্যাক্সেস করার চেষ্টা করেন এবং সেই প্রপার্টি null থাকে, তবে তা ত্রুটি সৃষ্টি করতে পারে।



let car = null;

if (car !== null) {
  console.log(car.model);  // Error: Cannot read property 'model' of null
} else {
  console.log("Car not available");  // Car not available
}

এখানে, আমরা আগে চেক করলাম যে car ভেরিয়েবলটি null না, যাতে কোন ত্রুটি না ঘটে।
4. null এবং typeof:
JavaScript-এ typeof অপারেটর যখন null এর সাথে ব্যবহৃত হয়, তখন এটি কিছুটা অবাক করার মতো আচরণ করে। এটি object রিটার্ন করে, যদিও null একটি বিশেষ মান এবং এটি একটি অবজেক্ট নয়। এটি JavaScript-এর একটি পুরনো ত্রুটি হিসেবে ধরা হয়।



let x = null;
console.log(typeof x);  // "object"

এখানে, typeof null একটি "object" রিটার্ন করে, যদিও এটি প্রকৃতপক্ষে একটি অবজেক্ট নয়। এটি একটি ঐতিহাসিক ত্রুটি, কিন্তু JavaScript-এ এখন পর্যন্ত এই আচরণ রয়ে গেছে।
5. null এর সাথে তুলনা (Comparison):
JavaScript-এ null এবং undefined তুলনা করলে কিছু অদ্ভুত আচরণ দেখা দিতে পারে।



console.log(null == undefined);  // true (they are loosely equal)
console.log(null === undefined); // false (strictly not equal)

== (loose equality) অপারেটর ব্যবহার করলে null এবং undefined সমান হিসেবে বিবেচিত হয়।
তবে === (strict equality) অপারেটর ব্যবহার করলে তারা আলাদা হয়ে যায়, কারণ তারা আলাদা টাইপের (একটি null এবং অন্যটি undefined).

6. null এবং Object Assignment:
একটি ভেরিয়েবলে null অ্যাসাইন করার মানে হলো, আপনি ঐ ভেরিয়েবলটিকে "অবজেক্ট" হিসেবে ব্যবহার করতে চান না বা সেটি কোনো অবজেক্টের রেফারেন্স নয়।


let car = null;  // Null is assigned, so car doesn't reference any object.
car = { model: "Toyota", year: 2020 };  // Now car is referencing an object
এখানে, প্রথমে car-এ null অ্যাসাইন করা হয়েছে, তার মানে এটি কোন অবজেক্ট রেফারেন্স করছে না। পরবর্তীতে, একটি অবজেক্ট অ্যাসাইন করা হলে car ঐ অবজেক্টকে রেফার করবে।

7. Null in JSON:
JSON (JavaScript Object Notation)-এও null এর ব্যবহার করা হয়।



{
  "name": "John",
  "age": null
}

এখানে, age প্রপার্টি null দিয়ে সেট করা হয়েছে, যা নির্দেশ করে যে বয়সের মান জানানো হয়নি বা এটি শূন্য।

null JavaScript-এ একটি স্পষ্টভাবে অ্যাসাইন করা মান যা একটি "শূন্য" বা "অবসন্ন" অবস্থা নির্দেশ করে।
এটি সাধারণত ব্যবহার হয় যখন আপনি জানেন যে কোনো মান নেই, বা কোন ডেটা অ্যাসাইন করা হয়নি।
undefined এবং null দুটো আলাদা কনসেপ্ট, যেখানে undefined মানে কোনো ভেরিয়েবল বা প্রপার্টি মানহীন, এবং null মানে কোনো অবজেক্ট বা ডেটা নিখোঁজ বা শূন্য।

null এবং undefined তুলনা করলে কিছু আচরণগত পার্থক্য থাকে, যেমন তাদের সমতা চেকের ক্ষেত্রে == এবং === এর মধ্যে পার্থক্য।
 */